desc emp;
select * from emp;

insert into emp values(emp_seq.nextval,'','20-Feb-17',3000);


alter table dept modify id number references emp ;

alter table emp modify id number primary key ;
---------------------------------------------
create sequence emp_seq 
increment by 1
minvalue 1
maxvalue 100
start with 2;

---------------------------------------------------
select emp_seq.currval from dual;
------------------------------------------

---------------------------------
CREATE MATERIALIZED VIEW MVW_EMP
   REFRESH COMPLETE ON DEMAND
  -- ENABLE QUERY REWRITE
   AS SELECT * FROM EMP;
   
   -----------------------------------------------
   EXECUTE DBMS_MVIEW.REFRESH('mvw_emp');
   -----------------------------
   create or replace procedure refresh_mvw_emp
   as
   begin
   dbms_mview.refresh('mvw_emp');
   end;
  -----------------------------
  BEGIN
DBMS_SCHEDULER.CREATE_JOB (
   job_name           =>  'MVIEW_REFRESH',
   job_type           =>  'STORED_PROCEDURE',
   job_action         =>  'refresh_mvw_emp',
   number_of_arguments => 0,
   start_date          => SYSTIMESTAMP,
   repeat_interval    =>   'FREQ=MINUTELY;INTERVAL=30', /* every other day */
   end_date            => NULL,
   enabled             => TRUE,
   auto_drop           => FALSE,
   comments            => 'This job refresh MV_EMP every day'
     );
  END;
   -------------------------------------
  exec DBMS_SCHEDULER.RUN_JOB('MVIEW_REFRESH',TRUE);
   
   
EXEC DBMS_SCHEDULER.drop_job('MVW_EMP_REFRESH');
   ----------------------------------------
select * from user_scheduler_jobs;
------------------------------------------
SELECT COUNT(1) FROM MVW_EMP;

SELECT COUNT(1) FROM EMP;

----------------------------------------
  
create or replace procedure add_emp(i_id in number default null , i_ename in varchar default null,i_j_date in date default null, i_salary in number default 1000, r_id out number)
as

begin
if i_id<=emp_seq.currval then
insert into emp values(emp_seq.nextval,i_ename,i_j_date,i_salary);
r_id:=emp_seq.currval;
else
insert into emp values(i_id,i_ename,i_j_date,i_salary);
r_id:=i_id;
end if;
dbms_output.put_line('record with id '||r_id||'inserted successfully');
end;
-------------------------------------------
set serveroutput on;

PROCEDURE EXECUTION:

declare
r_id number;
begin
add_emp(3,'emp','1-JAN-17',1000,r_id);
DBMS_OUTPUT.PUT_LINE('out parameter is '||r_id);
end;
---------------------------------

variable r_id number;

exec add_emp(3,'emp','1-JAN-17',1000,:r_id);
------------------------------------------------------------
create or replace procedure ex_cur(n in number, c out sys_refcursor)
AS
begin
open c for
select * from emp where id<=n;
end;


set serveroutput on;

DECLARE
  c SYS_REFCURSOR;
  e emp%ROWTYPE;
BEGIN

 ex_cur(4,c);

  LOOP


	FETCH c INTO e;

        --exit if no more records
        EXIT WHEN c%NOTFOUND;


        dbms_output.put_line(e.id);

  END LOOP;

  CLOSE c;

END;
------------------------------------------------------


create or replace procedure sam
 as
 temp varchar2(4000);
 begin
 temp:='drop table new_course';
 execute IMMEDIATE temp;
 
 execute immediate 'create table new_course as
 select * from course';
 dbms_output.put_line('elcome to ddl procedure');
 end;
 
 --------------------------------------------------
